{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExperteApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setinputValue","onSubmit","e","preventDefault","console","log","trim","length","categ","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imagenes","useFetchGifs","GifExperteApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"mMAKaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAG1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAsBA,OACI,uBAAMC,SAhBW,SAACC,GAClBA,EAAEC,iBAEFC,QAAQC,IAAI,iBACZD,QAAQC,IAAI,CAAER,kBAGVE,EAAWO,OAAOC,OAAS,IAC3BV,GAAc,SAAAW,GAAK,OAAKT,GAAL,mBAAmBS,OACtCR,EAAc,MAOlB,UACI,6BAAKD,IACL,uBACIU,KAAK,OACLC,MAAOX,EACPY,SAzBc,SAACT,GACvBF,EAAcE,EAAEU,OAAOF,c,+BCXlBG,EAAO,uCAAK,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0FAC0EC,UAAWH,GADrF,sBAEGI,MAAMF,GAFT,cAEfG,EAFe,gBAGEA,EAAUC,OAHZ,uBAGbC,EAHa,EAGbA,KAERjB,QAAQC,IAAIgB,GAENC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAG1CZ,QAAQC,IAAIiB,GAdS,kBAgBdA,GAhBc,4CAAL,sDCCPO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OAFAZ,QAAQC,IAAI,CAACoB,KAAIC,QAAOV,QAGpB,cADI,CACJ,OAAKc,UAAW,2DAAhB,UACG,qBACAC,IAAKf,EAAKgB,IAAON,IAEjB,8BAAIA,EAAJ,WCLEO,EAAU,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,UAYtB,ECbwB,SAACA,GAGzB,MAA0BhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA8BA,OAvBAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAGFnC,QAAQC,IAAIkC,GACZH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAACpB,IAUGqB,EDpB0BK,CAAa1B,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAKrB,OAEI,qCACI,+BAAKpB,EAAL,OACCoB,GAAW,mBAAGJ,UAAU,mCAAb,yBAIZ,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAI,SAAAC,GAAG,OAEV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aE/BxBgB,EAAgB,WAGzB,MAAoC3C,mBAAS,CAAC,4BAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAUA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ6C,EAAWnB,KAAI,SAAAT,GAAS,OACrB,cAAC,EAAD,CAEAA,UAAcA,GADTA,Y,MCpB5B6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b0e99d15.chunk.js","sourcesContent":["//rafc tab\r\n\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategorias }) => {\r\n\r\n\r\n    const [inputValue, setinputValue] = useState('')\r\n\r\n    //se dispare cuando el valor cambie\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        console.log('Submite hecho')\r\n        console.log({ setCategorias })\r\n\r\n        //SI ES MAYOR A DOS LETRAS\r\n        if (inputValue.trim().length > 2) {\r\n            setCategorias(categ => [inputValue,...categ]);\r\n            setinputValue('');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} >\r\n            <h1>{inputValue}</h1>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            ></input>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n//funcion setCategorias requerida\r\nAddCategory.propTypes = {\r\n    setCategorias: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const getGifs   = async (categoria) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=XUWg9f7WklTnBFdi4gckyiMtdWCUc6XB&q=${encodeURI (categoria)}&limit=10`;\r\n    const respuesta = await fetch(url);                                                            //encodeUri es para evitar inconsistencias con las busquedas\r\n    const { data } = await respuesta.json();\r\n\r\n    console.log(data);\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    console.log(gifs);\r\n    //setImages(gifs);\r\n    return gifs;\r\n};\r\n\r\n//getGifs();","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => { //recibe unas propiedades\r\n    console.log({id, title, url});\r\n\r\n    return (//classname es para especificar cosas con react pero es lo mismo que class\r\n        <div className= \"card animate__animated animate__bounce animate__delay-2s\">\r\n           <img \r\n           src={url} alt = {title} > \r\n           </img>\r\n           <p>{title} </p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ categoria }) => {\r\n\r\n    /* const [images, setImages] = useState([]);\r\n\r\n    //con esto evito a que la peticion se cargue mas de una vez\r\n    useEffect(() => {\r\n        getGifs(categoria)\r\n            .then(setImages);\r\n    }, [categoria]);\r\n */\r\n\r\n\r\n    const { data:images, loading } = useFetchGifs(categoria);//data:images se cambia el nombre data por images\r\n    //console.log(loading);\r\n\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n            <h3>{categoria} </h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n\r\n\r\n\r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                    images.map(img => (\r\n\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = (categoria) => {\r\n\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n    //con esto evito a que la peticion se cargue mas de una vez\r\n    useEffect(() => {\r\n        getGifs(categoria)\r\n            .then(imagenes => {\r\n\r\n                //setTimeout(() => {\r\n                console.log(imagenes);\r\n                setstate({\r\n                    data: imagenes,\r\n                    loading: false\r\n                });\r\n                // }, 3000);\r\n            });\r\n\r\n    }, [categoria]);\r\n\r\n\r\n    /* setTimeout(() => {\r\n        setstate({\r\n            data: [1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n            loading: false\r\n        })\r\n    }, 3000); */\r\n\r\n    return state; //regresa {data:[],loading:true}\r\n}\r\n","\r\nimport React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExperteApp = () => {\r\n\r\n    // const categorias = [ 'One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categorias, setCategorias] = useState(['Neon Genesis Evangelion']);\r\n\r\n    //const handleAdd = () => {\r\n    //setCategorias([...categorias, 'Neon Genesis Evangelion']);\r\n\r\n    //usando callbacks\r\n    //   setCategorias( categ => [...categ, 'Neon Genesis Evangelion']);\r\n    //  }\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategorias={setCategorias} />\r\n            <hr></hr>\r\n\r\n            <ol>\r\n                {\r\n                    categorias.map(categoria => (\r\n                       <GifGrid \r\n                       key={categoria}\r\n                       categoria = { categoria } />\r\n                    ))\r\n\r\n                    //return <li key={categoria}> {categoria} </li>\r\n\r\n\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n//el key es el id que se requiere por cada li\r\n//el map es como un forech en arrays\r\n\r\n// <button onClick={ handleAdd} >Agregar</button>\r\n\r\n// <AddCategory setCategorias={ setCategorias } />  manda un prop al otro lado y se desestructura con {}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExperteApp } from './GifExperteApp';\n\nimport './index.css';\n\n//GifExperteApp\n\nReactDOM.render(\n  <GifExperteApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}